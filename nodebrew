#!/usr/bin/env perl

# nodebrew
# Node.js version manager
#
# @author  Kazuhito Hokamura <k.hokamura@gmail.com>
# @url     https://github.com/hokaccha/nodebrew
# @version 0.1.0

use strict;
use warnings;
use File::Path qw/rmtree/;

our $VERSION = '0.1.0';
my $cmd = $ARGV[0] || 'help';
my $version = $ARGV[1];
my @cmds = qw/use install uninstall list ls/;
my $brew_dir = $ENV{NODEBREW_HOME} || $ENV{HOME} . '/.nodebrew';
my $src_dir = $brew_dir . '/src';
my $node_dir = $brew_dir . '/node';
my $current = $brew_dir . '/current';
print $brew_dir, "\n";

# check curl or wget
my $hascurl = `which cur`;
my $haswget = `which wget`;
if (!$hascurl && !$haswget) {
    die 'Need curl or wget';
}

mkdir $brew_dir unless -e $brew_dir;
mkdir $src_dir unless -e $src_dir;
mkdir $node_dir unless -e $node_dir;

sub cmd_use {
    my $target = "$node_dir/$version";
    return print "$version is not installed\n" unless -e $target;
    unlink $current if -e $current;
    symlink $target, $current;
    print "use $version\n";
}

sub cmd_install {
    return print "$version is already installed\n" if -e "$node_dir/$version";

    my @tarballs = (
        "http://nodejs.org/dist/$version/node-$version.tar.gz",
        "http://nodejs.org/dist/node-$version.tar.gz",
    );
    my $tarball = '';
    my $check_cmd = $hascurl ? 'curl -Is' : 'wget -Sq --spider';
    for (@tarballs) {
        if (qx[$check_cmd "$_" 2>&1 | grep '200 OK']) {
            $tarball = $_;
            last;
        }
    }
    return print "$version is not found\n" unless $tarball;

    unlink "$src_dir/node-$version.tar.gz";
    rmtree "$src_dir/node-$version";
    print "fetch: $tarball\n";

    my $fetch_cmd = $hascurl
        ? "curl -C - --progress-bar $tarball -o"
        : "wget -c $tarball -O";
    my $install_cmd = qq[
        cd "$src_dir" &&
        $fetch_cmd "node-$version.tar.gz" &&
        tar -xzf "node-$version.tar.gz" &&
        cd "node-$version" &&
        ./configure --prefix="$node_dir/$version" &&
        make &&
        make install
    ];

    # for debug
    # print $install_cmd;

    system $install_cmd;
}

sub cmd_uninstall {
    my $target = "$node_dir/$version";
    return print "$version is not installed\n" unless -e $target;
    rmtree $target;
    print "$version uninstalled\n";
}

sub cmd_list {
    opendir my $dh, $node_dir or die $!;
    while (my $dir = readdir $dh) {
        print "$dir\n" unless $dir =~ '^\.\.?$';
    }

    my $current_version = readlink $current || 'none';
    $current_version =~ s!$node_dir/!!;
    print "\ncurrent: $current_version\n";
}

sub cmd_ls {
    cmd_list();
}

sub cmd_help {
    print <<"...";
nodebrew $VERSION

Usage:
    nodebrew help                    Show this message
    nodebrew install <version>       Download and install a <version>
    nodebrew uninstall <version>     Uninstall a version
    nodebrew use <version>           Modify PATH to use <version>
    nodebrew list                    List installed versions
    nodebrew ls                      Alias list

Example:
    nodebrew install v0.6.0     Install a specific version number
    nodebrew use v0.6.0         Use a specific version number
...
}

if (0 == scalar grep { $_ eq $cmd } @cmds) {
    cmd_help();
}
else {
    no strict 'refs';
    *{'cmd_' . $cmd}->();
}

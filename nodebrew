#!/usr/bin/env perl

# nodebrew
# Node.js version manager
#
# @author  Kazuhito Hokamura <k.hokamura@gmail.com>
# @url     https://github.com/hokaccha/nodebrew
# @version 0.3.0

use strict;
use warnings;

package Nodebrew;

use File::Path qw/rmtree/;

our $VERSION = '0.3.0';

sub new {
    my $class = shift;
    my %opt = @_;
    my $self = {};
    my @props = qw/
        brew_dir
        nodebrew_url
        remote_list_url
        fetcher
        tarballs
    /;

    for (@props) {
        if ($opt{$_}) {
            $self->{$_} = $opt{$_};
        }
        else {
            die "required $_";
        }
    }

    bless $self, $class;
    $self->init();

    return $self;
}

sub init {
    my $self = shift;

    $self->{src_dir} = $self->{brew_dir} . '/src';
    $self->{node_dir} = $self->{brew_dir} . '/node';
    $self->{current} = $self->{brew_dir} . '/current';
    $self->{default_dir} = $self->{brew_dir} . '/default';
}

sub run {
    my ($self, $command, $args) = @_;

    $command ||= '';
    $command =~ s/-/_/g;
    if (my $cmd = $self->can("_cmd_$command")) {
        $cmd->($self, $args);
    }
    else {
        $self->_cmd_help($args);
    }
}

sub _cmd_use {
    my ($self, $args) = @_;
    my $version = $args->[0];
    my $target = "$self->{node_dir}/$version";
    my $nodebrew_path = "$target/bin/nodebrew";

    return print "$version is not installed\n" unless -e $target;
    unlink $self->{current} if -l $self->{current};
    symlink $target, $self->{current};
    symlink "$self->{brew_dir}/nodebrew", $nodebrew_path unless -l $nodebrew_path;
    print "use $version\n";
}

sub _cmd_install {
    my ($self, $args) = @_;
    my $version = $args->[0];

    return print "$version is already installed\n"
        if -e "$self->{node_dir}/$version";

    my $tarball;
    my @tarballs = @{ $self->{tarballs} };
    for (@tarballs) {
        $_ =~ s/{version}/$version/g;
        if ($self->{fetcher}->fetch_able($_)) {
            $tarball = $_;
            last;
        }
    }
    return print "$version is not found\n" unless $tarball;

    unlink "$self->{src_dir}/node-$version.tar.gz";
    rmtree "$self->{src_dir}/node-$version";
    print "fetch: $tarball\n";
    $self->{fetcher}->download($tarball, "$self->{src_dir}/node-$version.tar.gz")
        or die "download faild: $tarball";

    system qq[
        cd "$self->{src_dir}" &&
        tar -xzf "node-$version.tar.gz" &&
        cd "node-$version" &&
        ./configure --prefix="$self->{node_dir}/$version" &&
        make &&
        make install
    ];
}

sub _cmd_uninstall {
    my ($self, $args) = @_;
    my $version = $args->[0];
    my $target = "$self->{node_dir}/$version";
    my $current_version = $self->get_current_version();
    return print "$version is not installed\n" unless -e $target;
    rmtree $target;
    if ($current_version eq $version) {
        $self->use_default();
    }
    print "$version uninstalled\n";
}

sub _cmd_list {
    my ($self, $args) = @_;

    my @versions;
    opendir my $dh, $self->{node_dir} or die $!;
    while (my $dir = readdir $dh) {
        push @versions, $dir unless $dir =~ '^\.\.?$';
    }

    print scalar @versions
        ? join("\n", @{Nodebrew::Utils::sort_version(\@versions)})
        : "not installed";
    print "\n\ncurrent: " . $self->get_current_version() . "\n";
}

sub _cmd_ls {
    my ($self, $args) = @_;

    $self->_cmd_list($args);
}

sub _cmd_ls_remote {
    my ($self, $args) = @_;
    my $remote_version
        = Nodebrew::Utils::sort_version($self->get_remote_version());
    my $i = 0;
    my %tmp;
    for (@$remote_version) {
        my ($v1, $v2, $v3) = $_ =~ m/v(\d+)\.(\d+)\.(\d+)/;
        if (!$tmp{"$v1.$v2"}++) {
            print "\n\n" if $i;
            $i = 0;
        }

        print $_;
        print ++$i % 8 == 0 ? "\n" : ' ' x (10 - length $_);
    }
    print "\n";
}

sub _cmd_setup {
    my ($self, $args) = @_;

    mkdir $self->{brew_dir} unless -e $self->{brew_dir};
    mkdir $self->{src_dir} unless -e $self->{src_dir};
    mkdir $self->{node_dir} unless -e $self->{node_dir};
    mkdir $self->{default_dir} unless -e $self->{default_dir};
    mkdir "$self->{default_dir}/bin" unless -e "$self->{default_dir}/bin";

    my $nodebrew_path = "$self->{brew_dir}/nodebrew";
    $self->fetch_nodebrew();
    `chmod +x $nodebrew_path`;
    symlink $nodebrew_path, "$self->{default_dir}/bin/nodebrew";
    $self->use_default() if $self->get_current_version() eq 'none';

    my $brew_dir = $self->{brew_dir};
    $brew_dir =~ s/$ENV{'HOME'}/\$HOME/;
    print "install nodebrew in $brew_dir\n\n";
    print "========================================\n";
    print "Add path:\n\n";
    print "export PATH=$brew_dir/current/bin:\$PATH\n";
    print "========================================\n";
}

sub _cmd_selfupdate {
    my ($self, $args) = @_;

    $self->fetch_nodebrew();
    print "update successfull\n";
}

sub _cmd_help {
    my ($self, $args) = @_;

    print <<"...";
nodebrew $VERSION

Usage:
    nodebrew help                    Show this message
    nodebrew install <version>       Download and install a <version>
    nodebrew uninstall <version>     Uninstall a version
    nodebrew use <version>           Modify PATH to use <version>
    nodebrew list                    List installed versions
    nodebrew ls                      Alias list
    nodebrew ls-remote               List remote versions
    nodebrew selfupdate              Update nodebrew

Example:
    nodebrew install v0.6.0     Install a specific version number
    nodebrew use v0.6.0         Use a specific version number
...
}

sub use_default {
    my $self = shift;

    unlink $self->{current} if -l $self->{current};
    symlink $self->{default_dir}, $self->{current};
}

sub get_current_version {
    my $self = shift;

    return 'none' unless -l $self->{current};
    my $current_version = readlink $self->{current};
    $current_version =~ m!^$self->{node_dir}/(.+)!;
    return $1 || 'none';
}

sub fetch_nodebrew {
    my $self = shift;

    print "fetching nodebrew...\n";
    my $nodebrew_source = $self->{fetcher}->fetch($self->{nodebrew_url});
    my $nodebrew_path = "$self->{brew_dir}/nodebrew";

    open my $fh, '>', $nodebrew_path or die "Error: $!";
    print $fh $nodebrew_source;
}

sub get_remote_version {
    my $self = shift;

    my $html = $self->{fetcher}->fetch($self->{remote_list_url});
    my @versions;
    my %tmp;
    while ($html =~ m/(\d+\.\d+\.\d+)/g) {
        my $v = "v$1";
        push @versions, $v unless $tmp{$v}++;
    }

    return \@versions;
}

package Nodebrew::Utils;

sub sort_version {
    my $version = shift;

    return [sort {
        my ($a1, $a2, $a3) = ($a =~ m/v(\d+)\.(\d+)\.(\d+)/);
        my ($b1, $b2, $b3) = ($b =~ m/v(\d+)\.(\d+)\.(\d+)/);
        $a1 <=> $b1 || $a2 <=> $b2 || $a3 <=> $b3
    } @$version];
}

package Nodebrew::Fetcher;

sub get {
    my $type = shift;

    $type eq 'wget' ? Nodebrew::Fetcher::wget->new:
    $type eq 'curl' ? Nodebrew::Fetcher::curl->new:
    die 'Fetcher type invalid';
}

package Nodebrew::Fetcher::curl;

sub new { bless {}; }

sub fetch_able {
    my ($self, $url) = @_;

    `curl -Is "$url"` =~ m/200 OK/;
}

sub fetch {
    my ($self, $url) = @_;

    `curl -s $url`;
}

sub download {
    my ($self, $url, $path) = @_;

    system("curl -C - --progress-bar $url -o $path") == 0;
}

package Nodebrew::Fetcher::wget;

sub new { bless {}; }

sub fetch_able {
    my ($self, $url) = @_;

    `wget -Sq --spider "$url" 2>&1` =~ m/200 OK/;
}

sub fetch {
    my ($self, $url) = @_;

    `wget -q $url -O -`;
}

sub download {
    my ($self, $url, $path) = @_;

    system("wget -c $url -O $path") == 0;
}

package main;

use Cwd 'abs_path';

sub main {
    my $brew_dir = abs_path($ENV{'NODEBREW_ROOT'} || $ENV{'HOME'} . '/.nodebrew');
    my $nodebrew_url = 'https://raw.github.com/hokaccha/nodebrew/master/nodebrew';
    my $fetcher_type = `which curl` ? 'curl' :
                       `which wget` ? 'wget' :
                        die 'Need curl or wget';
    my $command = shift @ARGV;
    my $args = \@ARGV;

    Nodebrew->new(
        brew_dir        => $brew_dir,
        nodebrew_url    => $nodebrew_url,
        remote_list_url => 'http://nodejs.org/dist/',
        fetcher         => Nodebrew::Fetcher::get($fetcher_type),
        tarballs        => [
            "http://nodejs.org/dist/{version}/node-{version}.tar.gz",
            "http://nodejs.org/dist/node-{version}.tar.gz",
        ],
    )->run($command, $args);
}

main() unless caller;
